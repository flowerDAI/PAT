#include<iostream>
#include <algorithm>
using namespace std;
int main(){
	int first , n , k;
	cin >> first >> n >> k;
	
	int  data[100005], next[100005], list[100005];
	
	int temp;  // 用来暂存地址 
	for(int i = 0; i < n; i++){
		cin >> temp; 
		cin >> data[temp] >> next[temp];
	}
	
	// 数据存好后，排序
	int sum = 0;
	while(first != -1){
		list[sum++] = first;
		first = next[first];
	} 
	
	// 逆转元素
	for(int i = 0; i < (sum - sum % k); i += k){
		reverse(begin(list) + i, begin(list) + i + k );
	} 
	
	for(int i=0; i < sum - 1; i++ ){
		printf("%05d %d %05d\n",list[i], data[list[i]], list[i+1]);
	}
	printf("%05d %d -1",list[sum-1],data[list[sum-1]] );

	return 0;
}



// 方法二

#include<iostream>
#include<algorithm>
#include<cstdio>
using namespace std;

//结构体
typedef struct Link{
	int address, data, next;
	int order;  // 原来的顺序 
} Link;

Link L[100010] = {0};  // 存放输入的信息
 
Link T[100010] = {0};  // 排序后的 

int main(){
	
	int first,N,K, address;
	
	scanf("%d %d %d", &first, &N, &K);   // 输入 开始地址， 个数， 反转的值
	
	// 输入
	for(int i = 0; i < N; i++){
		scanf("%d", &address);
		scanf("%d %d", &L[address].data, &L[address].next );
		L[address].address = address;
	} 
	
	// 排序
	int cnt = 0;
	for(address = first; address != -1; address = L[address].next){
		T[cnt] = L[address];
		T[cnt++].order = cnt;
	} 
	
	// 反转
	for(int i = 0; i <= cnt-K; i+=K){
		reverse(T+i,T+i+K);
	} 
	
	T[cnt].address = -1;
	
	// 输出 
	for(int i= 0; i < cnt; i++){
		T[i].next = T[i+1].address;
		printf("%05d %d ", T[i].address, T[i].data);
		if(T[i].next == -1) printf("-1\n");
		else printf("%05d\n",T[i].next);
	}
	
	return 0;
}
